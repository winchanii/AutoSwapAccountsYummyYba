import time
import os
from datetime import datetime
import sys
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
import json
import urllib.parse
import socket
import subprocess
import psutil

# --- –ö–û–ù–°–¢–ê–ù–¢–ê –î–õ–Ø –ó–ê–î–ï–†–ñ–ö–ò –ü–û–°–õ–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê ---
RESTART_DELAY_SECONDS = 30  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webrb.exe (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
# --- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–ê–ù–¢–´ ---

# --- –ö–û–ù–°–¢–ê–ù–¢–ê –î–õ–Ø –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô –û–ö–û–ù ---
WEBRB_WINDOW_TITLE_EXCLUDES = [
    "chrome", "firefox", "edge", "opera", "safari", "browser", "yummy tracker", "yummytrackstat", "google chrome", "mozilla firefox", "microsoft edge"
]
# --- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–ê–ù–¢–´ ---

class WebRBController:
    def __init__(self):
        self.running = True
        self.webrb_path = "webrb.exe"  # –ü—É—Ç—å –∫ webrb.exe
        self.last_window = None
        
    def is_valid_webrb_window_title(self, title):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –æ–∫–Ω—É webrb."""
        if not title or not isinstance(title, str):
            return False
        title_lower = title.lower().strip()
        for exclude_word in WEBRB_WINDOW_TITLE_EXCLUDES:
            if exclude_word in title_lower:
                return False
        return True

    def find_webrb_window_by_process(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–∫–Ω–æ webrb –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É"""
        try:
            import pygetwindow as gw
            import psutil
            
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ webrb –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º...")
            
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'webrb' in proc.info['name'].lower():
                        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: {proc.info['name']} (PID: {proc.info['pid']})")
                        
                        all_windows = gw.getAllWindows()
                        for window in all_windows:
                            window_title = window.title.lower()
                            if (('system time' in window_title or 
                                'webrb' in window_title or 
                                'dead' in window_title) and 
                                len(window.title.strip()) > 0 and
                                self.is_valid_webrb_window_title(window.title)):
                                print(f"[{datetime.now().strftime('%H:%M:%S')}] –ù–∞–π–¥–µ–Ω–æ –æ–∫–Ω–æ: '{window.title}'")
                                self.last_window = window
                                return window
                        break
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
                    
        except ImportError:
            pass
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º: {e}")
        
        return None

    def find_webrb_window_by_position(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –æ–∫–Ω–æ webrb –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é"""
        try:
            import pygetwindow as gw
            
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü–æ–∏—Å–∫ –æ–∫–Ω–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏...")
            
            all_windows = gw.getAllWindows()
            for window in all_windows:
                window_title = window.title.lower()
                if (((window.left < 200 and window.top < 200) or 
                    ('system time' in window_title) or 
                    ('webrb' in window_title) or 
                    ('yummy' in window_title)) and 
                    len(window.title.strip()) > 0 and
                    self.is_valid_webrb_window_title(window.title)):
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ: '{window.title}' (–ü–æ–∑–∏—Ü–∏—è: {window.left}, {window.top})")
                    if (('system time' in window_title or 
                        'webrb' in window_title or 
                        'yummy' in window_title or 
                        'console' in window_title or 
                        'cmd' in window_title) and
                        self.is_valid_webrb_window_title(window.title)):
                        print(f"[{datetime.now().strftime('%H:%M:%S')}] –í—ã–±—Ä–∞–Ω–æ –æ–∫–Ω–æ: '{window.title}'")
                        self.last_window = window
                        return window
                        
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: {e}")
        
        return None
    
    def get_webrb_window(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–∫–Ω–æ webrb (–Ω–æ–≤–æ–µ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ)"""
        window = None
        if not window:
            window = self.find_webrb_window_by_process()
        if not window:
            window = self.find_webrb_window_by_position()
        if not window and self.last_window:
            try:
                if self.last_window.title and self.is_valid_webrb_window_title(self.last_window.title):
                    window = self.last_window
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: '{window.title}'")
                else:
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ '{getattr(self.last_window, 'title', 'Unknown')}' –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –°–±—Ä–æ—Å.")
                    self.last_window = None
            except Exception as e:
                print(f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}. –°–±—Ä–æ—Å.")
                self.last_window = None
        
        return window

    def kill_webrb_processes(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã webrb"""
        try:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ webrb...")
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'webrb' in proc.info['name'].lower():
                        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {proc.info['name']} (PID: {proc.info['pid']})")
                        proc.terminate()
                        try:
                            proc.wait(timeout=3)
                        except psutil.TimeoutExpired:
                            proc.kill()
                except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                    pass
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã webrb –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            return True
        except Exception as e:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return False
    
    def start_webrb(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç webrb"""
        try:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ webrb: {self.webrb_path}")
            process = subprocess.Popen(
                [self.webrb_path],
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            
            print(f"[{datetime.now().strftime('%H:%M:%S')}] webrb –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            time.sleep(3)
            return True
        except Exception as e:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ webrb: {e}")
            return False

    def restart_webrb(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç webrb"""
        print(f"\n{'='*50}")
        print(f"[{datetime.now().strftime('%H:%M:%S')}] üîÅ –ü–ï–†–ï–ó–ê–ü–£–°–ö WEBRB")
        print(f"{'='*50}")
        
        result = self.kill_webrb_processes()
        time.sleep(2)
        
        if result:
            result = self.start_webrb()
        
        if result:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ webrb –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            time.sleep(3)
            self.get_webrb_window()
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RESTART_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webrb...")
            time.sleep(RESTART_DELAY_SECONDS)
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webrb")
            
        print(f"{'='*50}\n")
        return result

class RequestHandler(BaseHTTPRequestHandler):
    def __init__(self, controller, *args, **kwargs):
        self.controller = controller
        super().__init__(*args, **kwargs)
    
    def do_GET(self):
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.log_message = lambda *args: None
        
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path.lower()
        
        print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {self.client_address[0]}: {self.path}")
        
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.end_headers()
        
        response = {"status": "error", "message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"}
        
        if path == "/restart":
            print(f"[{datetime.now().strftime('%H:%M:%S')}] üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webrb")
            try:
                result = self.controller.restart_webrb()
                if result:
                    response = {"status": "success", "message": "webrb –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"}
                else:
                    response = {"status": "error", "message": "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webrb"}
            except Exception as e:
                response = {"status": "error", "message": f"–û—à–∏–±–∫–∞: {str(e)}"}
                
        elif path == "/status":
            response = {
                "status": "running", 
                "message": "WebRB Controller –∞–∫—Ç–∏–≤–µ–Ω"
            }
            
        elif path == "/":
            response = {
                "status": "running", 
                "message": "WebRB Controller API",
                "ip": self.server.server_address[0],
                "port": self.server.server_address[1],
                "endpoints": {
                    "/restart": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webrb.exe",
                    "/status": "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"
                }
            }
        
        self.wfile.write(json.dumps(response, ensure_ascii=False).encode('utf-8'))
    
    def do_POST(self):
        self.do_GET()
    
    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', '*')
        self.end_headers()

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "127.0.0.1"

def run_server(controller, host='0.0.0.0', port=8080):
    local_ip = get_local_ip()
    print(f"[{datetime.now().strftime('%H:%M:%S')}] üöÄ –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö")
    print(f"[{datetime.now().strftime('%H:%M:%S')}] –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip}")
    print(f"[{datetime.now().strftime('%H:%M:%S')}] –ü–æ—Ä—Ç: {port}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    server = HTTPServer((host, port), lambda *args, **kwargs: RequestHandler(controller, *args, **kwargs))
    server.timeout = 1  # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    print(f"[{datetime.now().strftime('%H:%M:%S')}] ‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã")
    print(f"[{datetime.now().strftime('%H:%M:%S')}] –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print(f"[{datetime.now().strftime('%H:%M:%S')}]   GET/POST http://{local_ip}:{port}/restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webrb.exe")
    print(f"[{datetime.now().strftime('%H:%M:%S')}]   GET/POST http://{local_ip}:{port}/status   - –°—Ç–∞—Ç—É—Å")
    print(f"[{datetime.now().strftime('%H:%M:%S')}] üí° –î–æ—Å—Ç—É–ø –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –ø–æ: http://{local_ip}:{port}")
    print("-" * 70)
    
    try:
        while True:
            server.handle_request()  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É, –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    except KeyboardInterrupt:
        print(f"\n[{datetime.now().strftime('%H:%M:%S')}] ‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        server.shutdown()

def show_help():
    local_ip = get_local_ip()
    print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              WEBRB RESTART CONTROLLER v1.0                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                              ‚ïë
‚ïë üìã –û–ü–ò–°–ê–ù–ò–ï:                                                 ‚ïë
‚ïë   HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ webrb.exe             ‚ïë
‚ïë                                                              ‚ïë
‚ïë üåê –í–ê–® –ê–î–†–ï–°: {local_ip:15}                              ‚ïë
‚ïë üì° –ü–û–†–¢: 8080                                                ‚ïë
‚ïë                                                              ‚ïë
‚ïë üéØ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:                                       ‚ïë
‚ïë   ‚Ä¢ /restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ webrb.exe                         ‚ïë
‚ïë   ‚Ä¢ /status  - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã                              ‚ïë
‚ïë                                                              ‚ïë
‚ïë ‚è≥ –ó–ê–î–ï–†–ñ–ö–ê:                                                 ‚ïë
‚ïë   ‚Ä¢ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ webrb.exe: {RESTART_DELAY_SECONDS} —Å–µ–∫—É–Ω–¥   ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ WebRB Restart Controller...")
    show_help()
    
    try:
        import pygetwindow as gw
        import psutil
    except ImportError as e:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
        print("   pip install pygetwindow psutil")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    controller = WebRBController()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    run_server(controller)

if __name__ == "__main__":
    if sys.platform == "win32":
        os.system("chcp 65001 > nul")
    
    main()