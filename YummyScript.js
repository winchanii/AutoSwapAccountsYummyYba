// ==UserScript==
// @name         –Ø–º–º–∏–ê–≤—Ç–æ–°–≤–∞–ø–ê–∫–∫
// @namespace    http://tampermonkey.net/
// @version      2.9.7
// @description  –°–º–æ—Ç—Ä–∏ –ê–∫–∫–∏ –Ω–∞ –Ø–º–∏—Ç—Ä–µ–∫–µ—Ä –∞ –ø–æ—Ç–æ–º –∏—Ö –∞–≤—Ç–æ—Å–≤–∞–ø–∞–µ—Ç (—Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø —Ñ–∞–π–ª—ã)
// @author       You
// @match        https://yummytrackstat.com/your-bizzare-adventure
// @icon         https://www.google.com/s2/favicons?sz=64&domain=yummytrackstat.com
// @grant        GM_xmlhttpRequest
// @connect      your_lan_api
// @connect      *
// ==/UserScript==

(function() {
    'use strict';

    // --- Configuration ---
    const SOURCE_RAM_SETTINGS = {
        host: "your_lan_api",
        port: 7963,
        password: "your_pass"
    };

    const TARGET_SERVER_SETTINGS = {
        host: "your_lan_api",
        port: 8081  // –ü–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫
    };

    const CONTROL_SERVER_SETTINGS = {
        host: "your_lan_api",
        port: 8080  // –ü–æ—Ä—Ç –¥–ª—è /exit –∏ /launch
    };

    const TRIGGER_SERVER_SETTINGS = {
        host: "your_lan_api",
        port: 5000  // –ü–æ—Ä—Ç –¥–ª—è /trigger
    };

    const CHECK_INTERVAL_MINUTES = 5;
    const MONEY_THRESHOLD = 1000000; // 1M
    const BATCH_TRIGGER_COUNT = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    const DEBUG_MODE = false; //–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑—Ä–µ (f12)
    // --- –ö–æ–Ω–µ—Ü –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---


    // --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
    let fullAccounts = new Set(); // –ê–∫–∫–∞—É–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Ä–æ–≥–∞ –∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ "FULL"
    let isChecking = false;
    let lastCheckTime = 0;
    const CHECK_COOLDOWN_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥
    let checkIntervalId = null;

    // --- –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ ---
    function debugLog(message, data = null) {
        if (DEBUG_MODE) {
            const timestamp = new Date().toISOString();
            console.log(`[DEBUG ${timestamp}] ${message}`, data || '');
        }
    }

    function logMoneyFound(username, moneyStr, parsedMoney) {
        debugLog(`üí∞ –ù–∞–π–¥–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –¥–ª—è ${username}: "${moneyStr}" -> ${parsedMoney}`);
    }

    function logAccountProcessing(account) {
        debugLog(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: ${account.username}, –î–µ–Ω—å–≥–∏: ${account.money}`);
    }

    function logThresholdCheck(account) {
        const status = account.money >= MONEY_THRESHOLD ? '‚úÖ –î–û–°–¢–ò–ì–ù–£–¢' : '‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢';
        debugLog(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –¥–ª—è ${account.username}: ${account.money} >= ${MONEY_THRESHOLD} ${status}`);
    }

    // --- –§—É–Ω–∫—Ü–∏–∏ ---

    function parseMoneyString(moneyStr) {
        if (!moneyStr) return 0;
        debugLog(`üîÑ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–µ–Ω–µ–≥: "${moneyStr}"`);
        const cleanStr = moneyStr.replace(/[^\d.,KMBkmb]/g, '').trim().toUpperCase();
        if (!cleanStr) return 0;
        let numberPart = cleanStr;
        let multiplier = 1;
        debugLog(`üßπ –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: "${cleanStr}"`);

        if (cleanStr.endsWith('K')) {
            numberPart = cleanStr.slice(0, -1);
            multiplier = 1000;
            debugLog(`üìà –ù–∞–π–¥–µ–Ω —Å—É—Ñ—Ñ–∏–∫—Å K, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
        } else if (cleanStr.endsWith('M')) {
            numberPart = cleanStr.slice(0, -1);
            multiplier = 1000000;
            debugLog(`üìà –ù–∞–π–¥–µ–Ω —Å—É—Ñ—Ñ–∏–∫—Å M, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
        } else if (cleanStr.endsWith('B')) {
            numberPart = cleanStr.slice(0, -1);
            multiplier = 1000000000;
            debugLog(`üìà –ù–∞–π–¥–µ–Ω —Å—É—Ñ—Ñ–∏–∫—Å B, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
        }

        let normalizedNumberStr = numberPart.replace(/,/g, '');
        debugLog(`üî¢ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–∞: "${normalizedNumberStr}"`);

        const numberValue = parseFloat(normalizedNumberStr);
        if (isNaN(numberValue)) {
            console.warn(`[PARSE MONEY] Could not parse: '${moneyStr}' -> '${cleanStr}' -> '${normalizedNumberStr}'`);
            return 0;
        }

        const result = numberValue * multiplier;
        debugLog(`üî¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: ${numberValue} * ${multiplier} = ${result}`);
        return result;
    }

    function ensureOnlineTabActive() {
        return new Promise((resolve) => {
            debugLog("üîç –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–∫–∏ Online");
            const allRadioButtons = document.querySelectorAll('button[role="radio"]');
            debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ radio –∫–Ω–æ–ø–æ–∫: ${allRadioButtons.length}`);

            allRadioButtons.forEach((btn, index) => {
                const text = btn.textContent.trim();
                const value = btn.getAttribute('value');
                const isChecked = btn.getAttribute('aria-checked');
                debugLog(`üîò Radio –∫–Ω–æ–ø–∫–∞ ${index}: —Ç–µ–∫—Å—Ç="${text}", –∑–Ω–∞—á–µ–Ω–∏–µ="${value}", –∞–∫—Ç–∏–≤–Ω–∞=${isChecked}`);
            });

            let onlineTabButton = Array.from(document.querySelectorAll('button[role="radio"]'))
                .find(btn => btn.getAttribute('value') === 'online');

            if (!onlineTabButton) {
                debugLog("üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã");
                onlineTabButton = Array.from(document.querySelectorAll('button[role="radio"]'))
                    .find(btn => btn.textContent.trim().toLowerCase() === 'online');

                if (!onlineTabButton) {
                    onlineTabButton = Array.from(document.querySelectorAll('button[role="radio"]'))
                        .find(btn => btn.getAttribute('value')?.toLowerCase().includes('online'));
                }
            }

            if (!onlineTabButton) {
                console.warn("[TAB] Online tab button not found.");
                resolve(false);
                return;
            }

            const isAlreadyActive = onlineTabButton.getAttribute('aria-checked') === 'true';
            debugLog(`üîò –°—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–∫–∏ Online: ${isAlreadyActive ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}`);

            if (isAlreadyActive) {
                debugLog("‚úÖ –í–∫–ª–∞–¥–∫–∞ Online —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞");
                resolve(true);
                return;
            }

            debugLog("üëÜ –ö–ª–∏–∫–∞–µ–º –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ Online");
            debugLog("üìç –≠–ª–µ–º–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏:", onlineTabButton);
            onlineTabButton.click();

            setTimeout(() => {
                const isActiveNow = onlineTabButton.getAttribute('aria-checked') === 'true';
                debugLog(`üîÑ –°—Ç–∞—Ç—É—Å –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞: ${isActiveNow ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}`);
                resolve(isActiveNow);
            }, 1000);
        });
    }

    async function extractAccountData() {
        const accounts = [];
        debugLog("üöÄ –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤");

        try {
            const isTabActive = await ensureOnlineTabActive();
            if (!isTabActive) {
                console.error("[EXTRACT] Could not activate Online tab. Aborting extraction.");
                return accounts;
            }

            debugLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
            await new Promise(resolve => setTimeout(resolve, 1500));

            debugLog("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü—ã");
            let table = document.querySelector('table.w-full.caption-bottom');

            if (!table) {
                debugLog("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã");
                const tableSelectors = [
                    'table.w-full',
                    '.rounded-md.border table',
                    'table[data-testid*="table"]',
                    'table[role="table"]',
                    '[class*="table"]'
                ];

                for (const selector of tableSelectors) {
                    table = document.querySelector(selector);
                    if (table) {
                        debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`);
                        break;
                    }
                }
            }

            if (!table) {
                debugLog("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É");
                const allTables = document.querySelectorAll('table');
                for (const t of allTables) {
                    const headers = t.querySelectorAll('th');
                    const headerTexts = Array.from(headers).map(h => h.textContent.toLowerCase());
                    if (headerTexts.some(text => text.includes('account') || text.includes('money'))) {
                        table = t;
                        debugLog("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
                        break;
                    }
                }
            }

            if (!table) {
                console.warn("[EXTRACT] Main table element not found.");
                return accounts;
            }

            debugLog("üîç –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã");
            const headerRow = table.querySelector('thead tr') || table.querySelector('tr');
            if (!headerRow) {
                console.warn("[EXTRACT] Header row not found in table.");
                return accounts;
            }

            const headers = headerRow.querySelectorAll('th');
            debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${headers.length}`);

            headers.forEach((header, index) => {
                const headerText = header.textContent.trim().toLowerCase();
                const imgSrc = header.querySelector('img')?.src || '';
                debugLog(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ ${index}: —Ç–µ–∫—Å—Ç="${headerText}", img="${imgSrc.substring(0, 50)}"`);
            });

            let accountIndex = -1;
            let moneyIndex = -1;

            headers.forEach((header, index) => {
                const headerText = header.textContent.trim().toLowerCase();
                debugLog(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫ ${index}: '${headerText}'`);
                if (headerText.includes('account') || headerText.includes('–∞–∫–∫–∞—É–Ω—Ç')) {
                    accountIndex = index;
                    debugLog(`üè∑Ô∏è –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Account: –∏–Ω–¥–µ–∫—Å ${index}`);
                }
                const moneyImg = header.querySelector('img[src*="money"], img[src*="coin"], img[src*="gold"]');
                if (moneyImg || headerText.includes('money') || headerText.includes('coin') || headerText.includes('gold')) {
                    moneyIndex = index;
                    debugLog(`üí∞ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ Money: –∏–Ω–¥–µ–∫—Å ${index} (—Ç–µ–∫—Å—Ç: "${headerText}")`);
                }
            });

            if (accountIndex === -1 || moneyIndex === -1) {
                console.error(`[EXTRACT] Could not find required columns. Account: ${accountIndex}, Money: ${moneyIndex}`);
                headers.forEach((h, i) => debugLog(`[DEBUG] Header ${i}: '${h.textContent.trim()}'`));
                return accounts;
            }

            debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ - Account: ${accountIndex}, Money: ${moneyIndex}`);

            let bodyRows = table.querySelectorAll('tbody tr');
            if (bodyRows.length === 0) {
                debugLog("‚ö†Ô∏è tbody –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é");
                bodyRows = table.querySelectorAll('tr');
                bodyRows = Array.from(bodyRows).slice(1);
            }

            debugLog(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${bodyRows.length}`);

            if (bodyRows.length === 0) {
                debugLog("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞");
                return accounts;
            }

            bodyRows.forEach((row, rowIndex) => {
                debugLog(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 1}`);
                const cells = row.querySelectorAll('td');
                debugLog(`üìä –Ø—á–µ–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}: ${cells.length}`);

                if (cells.length <= Math.max(accountIndex, moneyIndex)) {
                    debugLog(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è—á–µ–µ–∫ (${cells.length})`);
                    return;
                }

                const accountCell = cells[accountIndex];
                let username = '';
                debugLog(`üë§ –Ø—á–µ–π–∫–∞ Account (${rowIndex + 1}):`, accountCell?.outerHTML?.substring(0, 200));

                const usernameSpan = accountCell?.querySelector('span.text-sm.font-medium');
                if (usernameSpan) {
                    username = usernameSpan.textContent.trim();
                    debugLog(`üë§ –ù–∞–π–¥–µ–Ω username (span): "${username}"`);
                } else {
                    username = accountCell?.textContent?.trim()?.split('\n')[0]?.trim() || '';
                    debugLog(`üë§ –ù–∞–π–¥–µ–Ω username (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ): "${username}"`);
                }

                if (!username) {
                    debugLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å username –∏–∑ —Å—Ç—Ä–æ–∫–∏ ${rowIndex + 1}`);
                    return;
                }

                const moneyCell = cells[moneyIndex];
                let money = 0;
                let moneyText = '';

                debugLog(`üíµ –Ø—á–µ–π–∫–∞ Money (${rowIndex + 1}):`, moneyCell?.outerHTML?.substring(0, 200));

                const moneySpan = moneyCell?.querySelector('span.border.text-sm');
                if (moneySpan) {
                    moneyText = moneySpan.textContent.trim();
                    debugLog(`üíµ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–µ–Ω–µ–≥ (span): "${moneyText}"`);
                    money = parseMoneyString(moneyText);
                    logMoneyFound(username, moneyText, money);
                } else {
                    debugLog(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω span –¥–µ–Ω–µ–≥ –≤ —Å—Ç—Ä–æ–∫–µ ${rowIndex + 1}`);
                    moneyText = moneyCell?.textContent?.trim() || '';
                    debugLog(`üíµ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–µ–Ω–µ–≥ (—è—á–µ–π–∫–∞): "${moneyText}"`);
                    money = parseMoneyString(moneyText);
                    logMoneyFound(username, moneyText, money);
                }

                accounts.push({ username, money });
                debugLog(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: ${username} = ${money}`);
            });

        } catch (error) {
            console.error("[EXTRACT] An error occurred during data extraction:", error);
            debugLog(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, error.stack);
        }

        debugLog(`üèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${accounts.length} —à—Ç.):`, accounts);
        return accounts;
    }

    function callRAMApi(endpoint, params = {}) {
        const urlParams = new URLSearchParams(params);
        if (SOURCE_RAM_SETTINGS.password) {
            urlParams.set('Password', SOURCE_RAM_SETTINGS.password);
        }
        const url = `http://${SOURCE_RAM_SETTINGS.host}:${SOURCE_RAM_SETTINGS.port}${endpoint}?${urlParams}`;

        debugLog(`üì° –í—ã–∑–æ–≤ RAM API: ${url}`);

        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: "GET",
                url: url,
                onload: function(response) {
                    debugLog(`üì• –û—Ç–≤–µ—Ç –æ—Ç RAM API (${response.status}):`, response.responseText);
                    if (response.status === 200) {
                        try {
                            const data = JSON.parse(response.responseText);
                            resolve(data);
                        } catch (e) {
                            if (endpoint === "/GetCookie" || endpoint === "/GetDescription") {
                                resolve(response.responseText);
                            } else {
                                reject(new Error(`Failed to parse JSON response: ${e.message}`));
                            }
                        }
                    } else {
                        reject(new Error(`RAM API error (${response.status}): ${response.statusText}`));
                    }
                },
                onerror: function(error) {
                    debugLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ RAM API:`, error);
                    reject(new Error(`Network error calling RAM API: ${error}`));
                }
            });
        });
    }

    async function isAccountInRAM(username) {
        try {
            debugLog(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ RAM: ${username}`);
            const accountListResponse = await callRAMApi("/GetAccounts");
            const accountsInRAM = accountListResponse.split(',').map(name => name.trim()).filter(name => name);
            const exists = accountsInRAM.includes(username);
            debugLog(`üìä –ê–∫–∫–∞—É–Ω—Ç ${username} ${exists ? '–Ω–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω'} –≤ RAM`);
            return exists;
        } catch (error) {
            console.error(`[RAM CHECK] Error for '${username}':`, error);
            return true; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        }
    }

    async function setDescriptionInRAM(username, description) {
        try {
            debugLog(`üìù –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ ${username}: ${description}`);

            const urlParams = new URLSearchParams();
            if (SOURCE_RAM_SETTINGS.password) {
                urlParams.set('Password', SOURCE_RAM_SETTINGS.password);
            }
            urlParams.set('Account', username);
            const url = `http://${SOURCE_RAM_SETTINGS.host}:${SOURCE_RAM_SETTINGS.port}/SetDescription?${urlParams.toString()}`;

            const requestBody = JSON.stringify({ Description: description });

            debugLog(`üì° –í—ã–∑–æ–≤ RAM API: POST ${url}`, `Body: ${requestBody}`);

            return new Promise((resolve, reject) => {
                GM_xmlhttpRequest({
                    method: "POST",
                    url: url,
                    data: requestBody,
                    headers: {
                        "Content-Type": "application/json"
                    },
                    onload: function(response) {
                        debugLog(`üì• –û—Ç–≤–µ—Ç –æ—Ç RAM API (${response.status}):`, response.responseText.substring(0, 200));
                        if (response.status === 200) {
                            debugLog(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${username} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${description}`);
                            resolve(true);
                        } else {
                            console.error(`[SET DESCRIPTION ERROR] Failed for ${username}. Status: ${response.status}`, response.responseText);
                            reject(new Error(`Failed to set description: ${response.status}`));
                        }
                    },
                    onerror: function(error) {
                        debugLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${username}:`, error);
                        reject(new Error(`Network error setting description: ${error}`));
                    }
                });
            });
        } catch (error) {
            console.error(`[SET DESCRIPTION] Exception for '${username}':`, error);
            return false;
        }
    }

    async function getCookieFromRAM(username) {
        try {
            debugLog(`üç™ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: ${username}`);
            const cookieResponse = await callRAMApi("/GetCookie", { Account: username });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—à–∏–±–∫–æ–π
            if (cookieResponse && typeof cookieResponse === 'string' && cookieResponse.trim() !== '') {
                 debugLog(`üîë –ö—É–∫–∏ –¥–ª—è ${username}: ${cookieResponse.substring(0, 50)}...`);
                 return cookieResponse;
            } else {
                debugLog(`‚ö†Ô∏è –ö—É–∫–∏ –¥–ª—è ${username} –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.`);
                return null;
            }
        } catch (error) {
            console.error(`[GET COOKIE] Error for '${username}':`, error);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥—Ä—É–≥–æ–≥–æ –ü–ö.
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫—É–∫–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
     */
    function sendCookieToTargetPC(username, cookie) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—É–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        debugLog(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –ü–ö (—Ç–æ–ª—å–∫–æ –∫—É–∫–∏): ${username}`, cookie ? `${cookie.substring(0, 50)}...` : 'COOKIE IS NULL');

        const url = `http://${TARGET_SERVER_SETTINGS.host}:${TARGET_SERVER_SETTINGS.port}/receive_cookie`;

        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: "POST",
                url: url,
                data: cookie, // <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'data' –≤–º–µ—Å—Ç–æ 'cookie'
                headers: {
                    "Content-Type": "text/plain" // –ú–µ–Ω—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                },
                onload: function(response) {
                    if (response.status === 200) {
                        debugLog(`‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π –ü–ö: ${username}`);
                        resolve(response);
                    } else {
                        console.error(`[SEND COOKIE ERROR] Failed for ${username}. Status: ${response.status}`, response.responseText);
                        reject(new Error(`Failed to send cookie: ${response.status}`));
                    }
                },
                onerror: function(error) {
                    debugLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—É–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–π –ü–ö ${username}:`, error);
                    reject(new Error(`Network error sending cookie: ${error}`));
                }
            });
        });
    }

    async function getAccountsWithDescriptions() {
        try {
            debugLog("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏–∑ RAM");
            const accountsResponse = await callRAMApi("/GetAccountsJson");
            debugLog(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${accountsResponse.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ RAM`);
            return accountsResponse;
        } catch (error) {
            console.error("[GET ACCOUNTS WITH DESCRIPTIONS] Error:", error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–∑ RAM, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.
     * –≠—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.
     */
    async function getAccountsWithoutDescription(limit = BATCH_TRIGGER_COUNT) {
        try {
            debugLog(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ RAM (–ª–∏–º–∏—Ç: ${limit})`);
            const ramAccounts = await getAccountsWithDescriptions();
            const availableAccounts = [];

            for (const ramAccount of ramAccounts) {
                const username = ramAccount.Username;
                const description = ramAccount.Description || "";

                if (!description || description.trim() === "") {
                    availableAccounts.push(username);
                    debugLog(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç ${username} –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏`);
                }

                if (availableAccounts.length >= limit) {
                    break;
                }
            }

            debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${availableAccounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:`, availableAccounts);
            return availableAccounts;
        } catch (error) {
            console.error("[GET ACCOUNTS WITHOUT DESCRIPTION] Error:", error);
            return [];
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Promise, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–π—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—É–∫.
     */
    async function sendCookiesForAccounts(accountList) {
        debugLog(`üì§ –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ –¥–ª—è ${accountList.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤:`, accountList);

        let successCount = 0;
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        for (const username of accountList) {
            debugLog(`üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${username}`);
            try {
                const cookie = await getCookieFromRAM(username);
                if (cookie) {
                    debugLog(`‚úÖ –ö—É–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è ${username}`);
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–∫–∏
                    await sendCookieToTargetPC(username, cookie);
                    debugLog(`‚úÖ –ö—É–∫–∏ –¥–ª—è ${username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.`);
                    successCount++;
                } else {
                    const errorMsg = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –¥–ª—è ${username} –∏–ª–∏ –∫—É–∫–∏ –ø—É—Å—Ç—ã–µ.`;
                    debugLog(errorMsg);
                    // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º successCount
                }
            } catch (error) {
                const errorMsg = `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ ${username}: ${error.message}`;
                debugLog(errorMsg);
                // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º successCount
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ª–µ–¥—É—é—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            }
        }

        debugLog(`üèÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}/${accountList.length}.`);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫—É–∫
        return successCount;
    }


    // --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –î–ï–ô–°–¢–í–ò–ô ---

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL.
     * @param {string} url - URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
     * @returns {Promise} - Promise, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ.
     */
    function sendGetRequest(url) {
        return new Promise((resolve, reject) => {
            debugLog(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–∞: ${url}`);
            GM_xmlhttpRequest({
                method: "GET",
                url: url,
                onload: function(response) {
                    debugLog(`üì• –û—Ç–≤–µ—Ç –æ—Ç ${url} (${response.status}):`, response.responseText);
                    if (response.status >= 200 && response.status < 300) {
                        resolve(response);
                    } else {
                        reject(new Error(`HTTP error ${response.status}: ${response.statusText}`));
                    }
                },
                onerror: function(error) {
                    debugLog(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ ${url}:`, error);
                    reject(new Error(`Network error calling ${url}: ${error}`));
                }
            });
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏:
     * 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /exit –Ω–∞ –ø–æ—Ä—Ç 8080
     * 2. –ñ–¥–µ—Ç 10 —Å–µ–∫—É–Ω–¥
     * 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /launch –Ω–∞ –ø–æ—Ä—Ç 8080
     * 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç /trigger –Ω–∞ –ø–æ—Ä—Ç 5000
     */
    async function performPostBatchActions() {
        debugLog("üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏");
        try {
            // 1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /exit –Ω–∞ –ø–æ—Ä—Ç 8080
            const exitUrl = `http://${CONTROL_SERVER_SETTINGS.host}:${CONTROL_SERVER_SETTINGS.port}/exit`;
            await sendGetRequest(exitUrl);
            debugLog("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /exit –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // 2. –ü–æ–¥–æ–∂–¥–∞—Ç—å 10 —Å–µ–∫—É–Ω–¥
            debugLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...");
            await new Promise(resolve => setTimeout(resolve, 10000));

            // 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /launch –Ω–∞ –ø–æ—Ä—Ç 8080
            const launchUrl = `http://${CONTROL_SERVER_SETTINGS.host}:${CONTROL_SERVER_SETTINGS.port}/launch`;
            await sendGetRequest(launchUrl);
            debugLog("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /launch –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            // 4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /trigger –Ω–∞ –ø–æ—Ä—Ç 5000
            const triggerUrl = `http://${TRIGGER_SERVER_SETTINGS.host}:${TRIGGER_SERVER_SETTINGS.port}/trigger`;
            await sendGetRequest(triggerUrl);
            debugLog("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /trigger –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

            debugLog("üèÅ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
        } catch (error) {
            console.error("[POST BATCH ACTIONS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π:", error);
            debugLog(`‚ùå –û—à–∏–±–∫–∞ –≤ performPostBatchActions: ${error.message}`);
            // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
     */
    async function checkAccounts() {
        const now = Date.now();
        if (isChecking) {
            debugLog("‚è≠Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return;
        }

        if ((now - lastCheckTime) < CHECK_COOLDOWN_MS) {
             debugLog(`‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: ${((now - lastCheckTime) / 1000).toFixed(1)}—Å –Ω–∞–∑–∞–¥`);
             return;
        }

        isChecking = true;
        lastCheckTime = now;
        debugLog("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤");

        try {
            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞
            const accountsOnPage = await extractAccountData();

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ—Ä–æ–≥–∞
            let newFullAccountsCount = 0;
            for (const account of accountsOnPage) {
                logAccountProcessing(account);

                if (isNaN(account.money)) {
                    debugLog(`‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –¥–ª—è ${account.username} —è–≤–ª—è–µ—Ç—Å—è NaN. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                    continue;
                }

                logThresholdCheck(account);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ "FULL"
                if (fullAccounts.has(account.username)) {
                    debugLog(`‚è≠Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${account.username} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ "–ø–æ–ª–Ω—ã—Ö". –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                    continue;
                }

                if (account.money >= MONEY_THRESHOLD) {
                    debugLog(`üéâ –ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è ${account.username}: ${account.money} >= ${MONEY_THRESHOLD}`);
                    const existsInRAM = await isAccountInRAM(account.username);
                    if (existsInRAM) {
                        debugLog(`‚úÖ –ê–∫–∫–∞—É–Ω—Ç ${account.username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ RAM.`);

                        // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ "FULL"
                        try {
                            await setDescriptionInRAM(account.username, "FULL");
                            debugLog(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${account.username}`);

                            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ "–ø–æ–ª–Ω—ã—Ö"
                            fullAccounts.add(account.username);
                            newFullAccountsCount++;
                            debugLog(`üíæ –ê–∫–∫–∞—É–Ω—Ç ${account.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ "–ø–æ–ª–Ω—ã—Ö"`);
                        } catch (error) {
                            debugLog(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${account.username}:`, error.message);
                        }
                    } else {
                        debugLog(`‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç ${account.username} –¥–æ—Å—Ç–∏–≥ –ø–æ—Ä–æ–≥–∞, –Ω–æ –ù–ï –Ω–∞–π–¥–µ–Ω –≤ RAM. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
                    }
                } else {
                    debugLog(`üìâ ${account.username}: ${account.money} < ${MONEY_THRESHOLD} - –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞`);
                }
            }

            debugLog(`üìä –ù–æ–≤—ã—Ö "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç —Ü–∏–∫–ª: ${newFullAccountsCount}`);
            debugLog(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${fullAccounts.size}`);

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—É–∫–∏
            if (fullAccounts.size >= BATCH_TRIGGER_COUNT) {
                debugLog(`üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${fullAccounts.size} >= ${BATCH_TRIGGER_COUNT}). –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏.`);

                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const accountsToSend = await getAccountsWithoutDescription(BATCH_TRIGGER_COUNT);
                if (accountsToSend.length >= BATCH_TRIGGER_COUNT) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–∫–∏ –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    const sentCount = await sendCookiesForAccounts(accountsToSend);
                    debugLog(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: ${sentCount}.`);

                    // --- –ò–ó–ú–ï–ù–ï–ù–ê –õ–û–ì–ò–ö–ê ---
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏
                    // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ 8 –∫—É–∫ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
                    if (sentCount === BATCH_TRIGGER_COUNT) {
                        await performPostBatchActions();
                        debugLog("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏.");
                    } else {
                        debugLog(`‚ö†Ô∏è –ù–µ –≤—Å–µ –∫—É–∫–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (${sentCount}/${BATCH_TRIGGER_COUNT}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º performPostBatchActions.`);
                    }
                    // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

                } else {
                    debugLog(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (${accountsToSend.length} < ${BATCH_TRIGGER_COUNT}). –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`);
                }

                // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                // –ê–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
                fullAccounts.clear();
                debugLog(`üóëÔ∏è –°–ø–∏—Å–æ–∫ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –æ—á–∏—â–µ–Ω.`);
            } else {
                 debugLog(`‚è≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "–ø–æ–ª–Ω—ã—Ö" –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (${fullAccounts.size}) –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ (${BATCH_TRIGGER_COUNT}). –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.`);
            }

        } catch (error) {
            console.error("[ERROR] During check cycle:", error);
        } finally {
            isChecking = false;
            debugLog("üèÅ –¶–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω");
        }
    }

    function stopPeriodicChecks() {
        if (checkIntervalId) {
            clearInterval(checkIntervalId);
            checkIntervalId = null;
            debugLog("‚èπÔ∏è –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
        }
    }

    function startPeriodicChecks() {
        if (checkIntervalId) {
            debugLog("‚ñ∂Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã");
            return;
        }
        const intervalMs = CHECK_INTERVAL_MINUTES * 60 * 1000;
        debugLog(`‚ñ∂Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞–∂–¥—ã–µ ${CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç (${intervalMs} –º—Å)`);
        checkIntervalId = setInterval(checkAccounts, intervalMs);
        setTimeout(checkAccounts, 2000); // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    }

    function init() {
        console.log("[INIT] YummyAuto Money Tracker & Account Switch Notifier v2.9.7 (Batch Send & Post Actions)");
        debugLog("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞");
        debugLog("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:", {
            SOURCE_RAM_SETTINGS,
            TARGET_SERVER_SETTINGS,   // –ü–æ—Ä—Ç 8081 –¥–ª—è –∫—É–∫
            CONTROL_SERVER_SETTINGS,  // –ü–æ—Ä—Ç 8080 –¥–ª—è /exit –∏ /launch
            TRIGGER_SERVER_SETTINGS,  // –ü–æ—Ä—Ç 5000 –¥–ª—è /trigger
            CHECK_INTERVAL_MINUTES,
            MONEY_THRESHOLD,
            BATCH_TRIGGER_COUNT,
            DEBUG_MODE
        });

        const waitForContent = setInterval(() => {
            const tableContainer = document.querySelector('div.rounded-md.border') ||
                                  document.querySelector('table.w-full.caption-bottom') ||
                                  document.querySelector('table');
            if (tableContainer) {
                clearInterval(waitForContent);
                debugLog("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫.");
                startPeriodicChecks();
            } else {
                debugLog("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...");
            }
        }, 1000);

        setTimeout(() => {
            if (!checkIntervalId) {
                clearInterval(waitForContent);
                console.error("[INIT] Page content did not load within 30 seconds. Script may not work correctly.");
                debugLog("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –Ω–æ –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏");
                startPeriodicChecks();
            }
        }, 30000);
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", init);
    } else {
        init();
    }

    window.addEventListener('beforeunload', () => {
        stopPeriodicChecks();
    });

})();
