from flask import Flask, request, jsonify
import json
import os
from datetime import datetime
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∏—Ç—å CORS –¥–ª—è –≤—Å–µ—Ö origins

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (–≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫—É–∫–∏)
COOKIES_FILE = 'received_cookies.json'
# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 8 –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT
COOKIES_TXT_FILE = r'C:\Yummyemu\YummyEmuPlayer\cookie.txt'
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
TARGET_COOKIE_COUNT = 8
# --- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
cookies_dir = os.path.dirname(COOKIES_TXT_FILE)
if not os.path.exists(cookies_dir):
    os.makedirs(cookies_dir)

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(COOKIES_FILE):
    with open(COOKIES_FILE, 'w') as f:
        json.dump([], f, indent=2)

# –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π TXT —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(COOKIES_TXT_FILE):
    with open(COOKIES_TXT_FILE, 'w') as f:
        pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª

@app.route('/')
def home():
    return jsonify({
        "message": "Cookie receiver server is running",
        "target_count": TARGET_COOKIE_COUNT,
        "files": {
            "json": COOKIES_FILE,
            "txt": COOKIES_TXT_FILE
        },
        "endpoints": {
            "POST /receive_cookie": "Receive and save cookie (text/plain)",
            "GET /cookies": "Get all saved cookies",
            "GET /cookies/txt": f"Get last {TARGET_COOKIE_COUNT} cookies as they would appear in the TXT file",
            "DELETE /cookies": "Clear all cookies"
        }
    })

@app.route('/receive_cookie', methods=['POST'])
def receive_cookie():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        cookie = request.get_data(as_text=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É–∫–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        if not cookie:
            print("‚ùå –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –∫—É–∫–∏")
            return jsonify({'success': False, 'message': 'Empty cookie received'}), 400
        print(f"üì• –ü–æ–ª—É—á–µ–Ω—ã –∫—É–∫–∏ (–¥–ª–∏–Ω–∞: {len(cookie)})")

        # --- –õ–û–ì–ò–ö–ê –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø ---
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—É–∫–∏ –∏–∑ JSON
        cookies_data_json = []
        if os.path.exists(COOKIES_FILE):
            with open(COOKIES_FILE, 'r') as f:
                try:
                    cookies_data_json = json.load(f)
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {COOKIES_FILE}. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")
                    cookies_data_json = []

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫—É–∫—É –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ JSON
        cookies_data_json.append({
            'cookie': cookie,
            'receivedAt': datetime.now().isoformat()
        })

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON —Ñ–∞–π–ª (–≤—Å–µ –∫—É–∫–∏)
        with open(COOKIES_FILE, 'w') as f:
            json.dump(cookies_data_json, f, indent=2)

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–±—Ä–∞–ª–æ—Å—å –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫
        if len(cookies_data_json) >= TARGET_COOKIE_COUNT:
            print(f"üéâ –ù–∞–∫–æ–ø–ª–µ–Ω–æ {len(cookies_data_json)} –∫—É–∫. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {TARGET_COOKIE_COUNT} –≤ TXT —Ñ–∞–π–ª.")
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ TARGET_COOKIE_COUNT –∫—É–∫
            latest_cookies = [item['cookie'] for item in cookies_data_json[-TARGET_COOKIE_COUNT:]]
            
            # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –∫—É–∫ –≤ TXT —Ñ–∞–π–ª, –∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            with open(COOKIES_TXT_FILE, 'w', encoding='utf-8') as f:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫—É–∫–∏ –ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É
                f.write('\n'.join(latest_cookies))
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª–æ–º –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
                f.write('\n') 
            
            print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {TARGET_COOKIE_COUNT} –∫—É–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {COOKIES_TXT_FILE}")
            
            return jsonify({
                'success': True, 
                'message': f'Cookie received. Total {len(cookies_data_json)} cookies accumulated. Last {TARGET_COOKIE_COUNT} saved to TXT.'
            }), 200
        else:
            # –ï—Å–ª–∏ –∫—É–∫ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            current_count = len(cookies_data_json)
            needed_count = TARGET_COOKIE_COUNT - current_count
            print(f"üç™ –ö—É–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω—ã: {current_count}/{TARGET_COOKIE_COUNT}. –ù—É–∂–Ω–æ –µ—â–µ {needed_count}.")
            return jsonify({
                'success': True, 
                'message': f'Cookie received and stored. Accumulated {current_count}/{TARGET_COOKIE_COUNT} cookies. Need {needed_count} more.'
            }), 200

    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É–∫–∏: {str(e)}')
        print(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{error_details}")
        return jsonify({'success': False, 'message': 'Error saving cookie'}), 500

@app.route('/cookies', methods=['GET'])
def get_cookies():
    try:
        if os.path.exists(COOKIES_FILE):
            with open(COOKIES_FILE, 'r') as f:
                try:
                    cookies_data = json.load(f)
                except json.JSONDecodeError:
                    cookies_data = []
        else:
            cookies_data = []
        return jsonify(cookies_data), 200
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫—É–∫–∏: {str(e)}')
        return jsonify({'error': 'Error reading cookies'}), 500

@app.route('/cookies/txt', methods=['GET'])
def get_cookies_txt_format():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ TARGET_COOKIE_COUNT –∫—É–∫ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –≤ —Ñ–∞–π–ª–µ cookie.txt."""
    try:
        cookies_data_json = []
        if os.path.exists(COOKIES_FILE):
            with open(COOKIES_FILE, 'r') as f:
                try:
                    cookies_data_json = json.load(f)
                except json.JSONDecodeError:
                    cookies_data_json = []

        if len(cookies_data_json) >= TARGET_COOKIE_COUNT:
            latest_cookies = [item['cookie'] for item in cookies_data_json[-TARGET_COOKIE_COUNT:]]
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –≤ —Ñ–∞–π–ª–µ TXT: –∫–∞–∂–¥–∞—è –∫—É–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è \n
            txt_content = '\n'.join(latest_cookies) + '\n'
            return txt_content, 200, {'Content-Type': 'text/plain; charset=utf-8'}
        else:
            return f"Not enough cookies. Have {len(cookies_data_json)}, need {TARGET_COOKIE_COUNT}.\n", 400, {'Content-Type': 'text/plain; charset=utf-8'}

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ TXT –∫—É–∫–∏: {str(e)}')
        return 'Error generating cookie list\n', 500, {'Content-Type': 'text/plain; charset=utf-8'}

@app.route('/cookies', methods=['DELETE'])
def clear_cookies():
    try:
        # –û—á–∏—â–∞–µ–º JSON —Ñ–∞–π–ª
        with open(COOKIES_FILE, 'w') as f:
            json.dump([], f, indent=2)
        # –û—á–∏—â–∞–µ–º TXT —Ñ–∞–π–ª
        with open(COOKIES_TXT_FILE, 'w') as f:
            pass  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        print('üóëÔ∏è –í—Å–µ –∫—É–∫–∏ –æ—á–∏—â–µ–Ω—ã')
        return jsonify({'success': True, 'message': 'All cookies cleared'}), 200
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—É–∫–∏: {str(e)}')
        return jsonify({'success': False, 'message': 'Error clearing cookies'}), 500

if __name__ == '__main__':
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8081")
    print(f"üìÅ –§–∞–π–ª –∫—É–∫–∏ JSON (–≤—Å–µ): {COOKIES_FILE}")
    print(f"üìÅ –§–∞–π–ª –∫—É–∫–∏ TXT (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {TARGET_COOKIE_COUNT}): {COOKIES_TXT_FILE}")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–∫ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: {TARGET_COOKIE_COUNT}")
    print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   POST /receive_cookie - –ü—Ä–∏–Ω—è—Ç—å –∫—É–∫–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫—É–∫–∏)")
    print("   GET /cookies - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫—É–∫–∏ (JSON)")
    print(f"   GET /cookies/txt - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ {TARGET_COOKIE_COUNT} –∫—É–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ TXT")
    print("   DELETE /cookies - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫—É–∫–∏")
    print("   GET / - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö, –ø–æ—Ä—Ç 8081
    app.run(host='0.0.0.0', port=8081, debug=True)
